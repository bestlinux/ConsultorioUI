@page "/agendas"
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject TooltipService TooltipService
@inject IAgendaService _agendaService

<RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender style="height: 768px;" TItem="AgendaDTO" Data=@appointments StartProperty="InicioSessao" EndProperty="FimSessao"
                 TextProperty="PacienteNome" SelectedIndex="1"
                 SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender AppointmentMouseEnter=@OnAppointmentMouseEnter AppointmentMouseLeave=@OnAppointmentMouseLeave>
    <RadzenDayView />
    <RadzenWeekView />
    <RadzenMonthView />
    <RadzenYearView />
</RadzenScheduler>

@code {
    RadzenScheduler<AgendaDTO> scheduler;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();
    public string? MensagemErro { get; set; }
    bool isLoading = false;

    IList<AgendaDTO> appointments = new List<AgendaDTO>();

    async Task ShowBusyDialogLogout()
    {
        await BusyDialogLogout();
    }

    // Busy dialog from markup
    async Task BusyDialogLogout()
    {
        await DialogService.OpenAsync("", ds =>
    @<RadzenStack AlignItems="AlignItems.Center" Gap="2rem" Class="rz-p-12">
        <RadzenImage Path="images/community.svg" Style="width: 200px;" AlternateText="community" />
        <RadzenText TextStyle="TextStyle.H6">Sua sessão expirou, por favor, refaça o login</RadzenText>
        <RadzenButton Click=@(args => RefazerLogin(ds)) Text="Sair" ButtonStyle="ButtonStyle.Primary" />
    </RadzenStack>
    , new DialogOptions() { ShowTitle = false, Style = "min-height:auto;min-width:auto;width:auto", CloseDialogOnEsc = false });
    }

    void RefazerLogin(DialogService ds)
    {
        ds.Close();
        NavigationManager.NavigateTo("logout");
    }

    async Task CarregarAgenda()
    {
        try
        {
            appointments = await _agendaService.GetAgendas();
        }
        catch (UnauthorizedAccessException)
        {
            await ShowBusyDialogLogout();
        }
        catch (Exception ex)
        {
            MensagemErro = $"Erro ao carregar as agendas : {ex.Message}";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await ShowLoading();
        try
        {
            await CarregarAgenda();
        }
        catch (UnauthorizedAccessException)
        {
            NavigationManager.NavigateTo("logout");
        }
        catch (Exception ex)
        {
            MensagemErro = $"Erro ao carregar as agendas : {ex.Message}";
        }
    }

    async Task ShowLoading()
    {
        isLoading = true;

        await Task.Yield();

        isLoading = false;
    }

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            //args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            //args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }


    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        //console.Log($"SlotSelect: Start={args.Start} End={args.End}");

        if (args.View.Text != "Year")
        {
            AgendaDTO data = await DialogService.OpenAsync<IncluirAgendamento>("Incluir agendamento",
                new Dictionary<string, object> { { "InicioSessao", args.Start }, { "FimSessao", args.End } });

            if (data != null)
            {
                appointments.Add(data);
                // Either call the Reload method or reassign the Data property of the Scheduler
                await CarregarAgenda();
                await scheduler.Reload();
            }
        }
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<AgendaDTO> args)
    {
        //console.Log($"AppointmentSelect: Appointment={args.Data.Text}");

        //SE NÃO FOR ANIVERSÁRIO
        if (args.Data.TipoConsulta != 4)
        {
            var copy = new AgendaDTO
                {
                    InicioSessao = args.Data.InicioSessao,
                    FimSessao = args.Data.FimSessao,
                    PacienteNome = args.Data.PacienteNome,
                    ValorSessao = args.Data.ValorSessao,
                    TipoConsulta = args.Data.TipoConsulta,
                    StatusConsulta = args.Data.StatusConsulta,
                    PacienteId = args.Data.PacienteId,
                    Id = args.Data.Id
                };

            var data = await DialogService.OpenAsync<EditarAgendamento>("Editar Agendamento", new Dictionary<string, object> { { "Agendamento", copy } });

            if (data != null)
            {
                // Update the appointment
                args.Data.InicioSessao = data.InicioSessao;
                args.Data.FimSessao = data.FimSessao;
                args.Data.PacienteNome = data.PacienteNome;
                args.Data.ValorSessao = data.ValorSessao;
                args.Data.TipoConsulta = data.TipoConsulta;
                args.Data.StatusConsulta = data.StatusConsulta;
                args.Data.PacienteId = data.PacienteId;
                args.Data.Id = data.Id;
            }

            await scheduler.Reload();
            await CarregarAgenda();
        }
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<AgendaDTO> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        if (args.Data.StatusConsulta == 2)
        {
            args.Attributes["style"] = "background: red";
        }
        else if (args.Data.StatusConsulta == 3)
        {
            args.Attributes["style"] = "background: yellow";
        }
        else if (args.Data.StatusConsulta == 1)
        {
            args.Attributes["style"] = "background: green";
        }

        //ANIVERSARIO
        if (args.Data.TipoConsulta == 4)
        {
            args.Attributes["style"] = "background: pink";
        }
    }

    void OnAppointmentMouseEnter(SchedulerAppointmentMouseEventArgs<AgendaDTO> args)
    {
        if (args.Data.TipoConsulta != 4)
        {
            TooltipService.Open(args.Element, ts =>
            @<RadzenStack Orientation="Orientation.Vertical" Gap="0" Class="rz-p-6" Style="min-width: 250px; max-width: 500px;">
                <RadzenText TextStyle="TextStyle.H4" Class="rz-mb-4" Style="color: var(--rz-tooltip-color);">
                    @args.Data.PacienteNome
                </RadzenText>
                <RadzenStack Orientation="Orientation.Horizontal" Gap="4px">
                    <RadzenText TextStyle="TextStyle.Body2" Style="color: var(--rz-tooltip-color); width: 44px;">
                        <strong>Inicio</strong>
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2" Style="color: var(--rz-tooltip-color);">
                           @args.Data.InicioSessao.ToString("dddd, dd MMMM yyyy hh:mm tt")
                    </RadzenText>
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Horizontal" Gap="4px">
                    <RadzenText TextStyle="TextStyle.Body2" Style="color: var(--rz-tooltip-color); width: 44px;">
                        <strong>Fim</strong>
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2" Style="color: var(--rz-tooltip-color);">
                        @args.Data.FimSessao.ToString("dddd, dd MMMM yyyy hh:mm tt")
                    </RadzenText>
                </RadzenStack>
            </RadzenStack>
            , new TooltipOptions { Position = TooltipPosition.Right, Duration = null });
        }
        else
        {
            TooltipService.Open(args.Element, ts =>
            @<RadzenStack Orientation="Orientation.Vertical" Gap="0">
                <RadzenImage Path="images/aniversario.png" Style="width: 10rem;" AlternateText="aniversario" />
            </RadzenStack>
            , new TooltipOptions { Position = TooltipPosition.Bottom, Duration = null });
        }
    }

    void OnAppointmentMouseLeave(SchedulerAppointmentMouseEventArgs<AgendaDTO> args)
    {
        TooltipService.Close();
    }
}