@using Blazored.LocalStorage
@inherits LayoutComponentBase
@inject IAlertaService _alertaService;
@inject ILocalStorageService _localStorageService;
@inject NavigationManager NavigationManager

<style>
    .rz-grid-table {
        width: unset;
    }
</style>
@if (MensagemErro is not null)
{
    <RadzenAlert AlertStyle="AlertStyle.Danger" Variant="Variant.Flat" Shade="Shade.Lighter">
        @MensagemErro
    </RadzenAlert>
}
<RadzenComponents />
<RadzenLayout>
    <RadzenHeader>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
            <RadzenSidebarToggle Click="@(() => sidebar1Expanded = !sidebar1Expanded)" />
            <div class="top-row px-4">
                <LoginDisplay />
            </div>
              <AuthorizeView>
                  <Authorized>
                    <RadzenButton ButtonStyle="ButtonStyle.Primary" Click="@OnClick">
                        Alertas
                        <RadzenBadge Variant="Variant.Outlined" BadgeStyle="BadgeStyle.Light" IsPill="@true" Text="@totalAlertas.ToString()" class="rz-ml-2" />
                    </RadzenButton>
                   </Authorized>
                </AuthorizeView>
        </RadzenStack>
    </RadzenHeader>
    <RadzenSidebar @bind-Expanded="@sidebar1Expanded">
        <RadzenPanelMenu>
            <NavMenu />
        </RadzenPanelMenu>
    </RadzenSidebar>
    <RadzenBody>
        <AuthorizeView>
            <Authorized>
                <div class="rz-p-4">
                    @Body
                </div>
            </Authorized>
            <NotAuthorized>
                <Login />
            </NotAuthorized>
        </AuthorizeView>
    </RadzenBody>
    <RadzenFooter>
        <RadzenText TextStyle="TextStyle.Caption">Todos os direitos reservados para Aparecida Gago Machado - CRP 06/149382  - aparecidagago@gmail.com</RadzenText><br />
    </RadzenFooter>
</RadzenLayout>

@code {
    bool sidebar1Expanded = true;

    private System.Threading.Timer? timer;

    IEnumerable<AlertaDTO> alertas = new List<AlertaDTO>();

    public string? MensagemErro { get; set; }

    public int? totalAlertas { get; set; }

    public void OnClick()
    {
        NavigationManager.NavigateTo("/");
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            var token = await _localStorageService.ContainKeyAsync("authToken");

            if (token)
                await CarregarAlertas();
        }
        catch (UnauthorizedAccessException)
        {

        }
        catch (Exception ex)
        {
            MensagemErro = $"Erro ao carregar os alertas : {ex.Message}";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            var token = await _localStorageService.ContainKeyAsync("authToken");

            if (token)
                await CarregarAlertas();
        }
        catch (UnauthorizedAccessException)
        {

        }
        catch (Exception ex)
        {
            MensagemErro = $"Erro ao carregar os alertas : {ex.Message}";
        }
    }

    async Task CarregarAlertas()
    {
        try
        {
            alertas = await _alertaService.GetAlertasByMesAno(DateTime.Now.Month, DateTime.Now.Year);
            totalAlertas = alertas.Count();
        }
        catch (UnauthorizedAccessException)
        {

        }
        catch (Exception ex)
        {
            MensagemErro = $"Erro ao carregar os alertas : {ex.Message}";
        }
    }
}